"use strict";(self.webpackChunksec=self.webpackChunksec||[]).push([[622],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),u=a,f=p["".concat(c,".").concat(u)]||p[u]||m[u]||i;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={id:"writing",title:"Writing Events",sidebar_label:"Writing"},o=void 0,s={unversionedId:"writing",id:"writing",title:"Writing Events",description:"",source:"@site/../sec-docs/target/mdoc/writing.md",sourceDirName:".",slug:"/writing",permalink:"/sec/docs/writing",draft:!1,tags:[],version:"current",frontMatter:{id:"writing",title:"Writing Events",sidebar_label:"Writing"},sidebar:"mainSidebar",previous:{title:"Config",permalink:"/sec/docs/config"},next:{title:"Reading",permalink:"/sec/docs/reading"}},c={},l=[],d={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.data.NonEmptyList\nimport cats.syntax.all.*\nimport cats.effect.*\nimport sec.*\nimport sec.api.*\nimport sec.syntax.all.*\nimport scodec.bits.ByteVector\n\nobject WritingEvents extends IOApp:\n\n  def run(args: List[String]): IO[ExitCode] = EsClient\n    .singleNode[IO](Endpoint("127.0.0.1", 2113))\n    .resource\n    .use(client => useStreams(client.streams))\n    .as(ExitCode.Success)\n\n  def useStreams(streams: Streams[IO]): IO[Unit] = \n\n    val mkStreamId: IO[StreamId] = \n      for\n        uuid     <- mkUuid[IO]\n        streamId <- StreamId(s"write_example-$uuid").liftTo[IO]\n      yield streamId\n\n    def mkEventData(json: String): IO[EventData] = \n      for\n        uuid <- mkUuid[IO]\n        data <- ByteVector.encodeUtf8(json).liftTo[IO]\n        et   <- EventType("event-type").liftTo[IO]\n      yield EventData(et, uuid, data, ContentType.Json)\n\n    val eventData1: IO[EventData] = mkEventData("""{ "data" : "hello" }""")\n    val eventData2: IO[EventData] = mkEventData("""{ "data" : "world" }""")\n\n    for\n      streamId <- mkStreamId\n      data     <- NonEmptyList.of(eventData1, eventData2).sequence\n      _        <- streams.appendToStream(streamId, StreamState.NoStream, data)\n      _        <- streams.readStreamForwards(streamId).debug(_.render).compile.drain\n    yield ()\n')))}m.isMDXComponent=!0}}]);