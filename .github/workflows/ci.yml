# This file was automatically generated by sbt-github-actions using the
# githubWorkflowGenerate task. You should add and commit this file to
# your git repository. It goes without saying that you shouldn't edit
# this file by hand! Instead, if you wish to make changes, you should
# change your sbt build configuration to revise the workflow description
# to meet your needs, then regenerate this file.

name: Continuous Integration

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    tags: [v*]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


concurrency:
  group: ${{ github.workflow }} @ ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest]
        scala: [3]
        java: [temurin@21]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - name: Install sbt
        if: contains(runner.os, 'macos')
        run: brew install sbt

      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java (temurin@21)
        id: setup-java-temurin-21
        if: matrix.java == 'temurin@21'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@21' && steps.setup-java-temurin-21.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Start Single Node
        env:
          SEC_GENCERT_CERTS_ROOT: ${{ github.workspace }}
        run: |
          pushd .docker
          ./single-node.sh up -d
          popd

      - name: Check that workflows are up to date
        run: sbt githubWorkflowCheck

      - name: Compile docs
        run: sbt '++ ${{ matrix.scala }}' compileDocs

      - name: Regular tests
        run: sbt '++ ${{ matrix.scala }}' compileTests tests/test

      - name: Single node integration tests
        env:
          SEC_SIT_CERTS_PATH: ${{ github.workspace }}/certs
          SEC_SIT_AUTHORITY: es.sec.local
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: sbt '++ ${{ matrix.scala }}' 'tests / Sit / test'

      - name: Stop Single Node
        if: always()
        run: |
          pushd .docker
          ./single-node.sh down
          popd

      - name: Start Cluster Nodes
        env:
          SEC_GENCERT_CERTS_ROOT: ${{ github.workspace }}
        run: |
          pushd .docker
          ./cluster.sh up -d
          popd

      - name: Cluster integration tests
        env:
          SEC_CIT_CERTS_PATH: ${{ github.workspace }}/certs
          SEC_CIT_AUTHORITY: es.sec.local
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 10
          command: sbt '++ ${{ matrix.scala }}' 'tests / Cit / test'

      - name: Stop Cluster Nodes
        if: always()
        run: |
          pushd .docker
          ./cluster.sh down
          popd

      - name: Make target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        run: mkdir -p fs2-netty/target fs2/target tsc/target core/target project/target

      - name: Compress target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        run: tar cf targets.tar fs2-netty/target fs2/target tsc/target core/target project/target

      - name: Upload target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        uses: actions/upload-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-${{ matrix.scala }}
          path: targets.tar

  publish:
    name: Publish Artifacts
    needs: [build]
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [temurin@21]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install sbt
        if: contains(runner.os, 'macos')
        run: brew install sbt

      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java (temurin@21)
        id: setup-java-temurin-21
        if: matrix.java == 'temurin@21'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@21' && steps.setup-java-temurin-21.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Download target directories (3)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3

      - name: Inflate target directories (3)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Import signing key
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE == ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: echo $PGP_SECRET | base64 -d -i - | gpg --import

      - name: Import signing key and strip passphrase
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE != ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: |
          echo "$PGP_SECRET" | base64 -d -i - > /tmp/signing-key.gpg
          echo "$PGP_PASSPHRASE" | gpg --pinentry-mode loopback --passphrase-fd 0 --import /tmp/signing-key.gpg
          (echo "$PGP_PASSPHRASE"; echo; echo) | gpg --command-fd 0 --pinentry-mode loopback --change-passphrase $(gpg --list-secret-keys --with-colons 2> /dev/null | grep '^sec:' | cut --delimiter ':' --fields 5 | tail -n 1)

      - name: Publish
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_CREDENTIAL_HOST: ${{ secrets.SONATYPE_CREDENTIAL_HOST }}
        run: sbt tlCiRelease

      - name: Compile docs
        run: sbt compileDocs

      - if: github.ref == 'refs/heads/main'
        env:
          GIT_DEPLOY_KEY: ${{ secrets.GIT_DEPLOY_KEY }}
        run: sbt docs/docusaurusPublishGhpages

  dependency-submission:
    name: Submit Dependencies
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [temurin@21]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install sbt
        if: contains(runner.os, 'macos')
        run: brew install sbt

      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java (temurin@21)
        id: setup-java-temurin-21
        if: matrix.java == 'temurin@21'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@21' && steps.setup-java-temurin-21.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Submit Dependencies
        uses: scalacenter/sbt-dependency-submission@v2
        with:
          modules-ignore: sec-docs_3 tests_3 sec_3
          configs-ignore: test scala-tool scala-doc-tool test-internal

  validate-steward:
    name: Validate Steward Config
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [temurin@11]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout current branch (fast)
        uses: actions/checkout@v4

      - name: Setup Java (temurin@11)
        id: setup-java-temurin-11
        if: matrix.java == 'temurin@11'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11

      - uses: coursier/setup-action@v1
        with:
          apps: scala-steward

      - run: scala-steward validate-repo-config .scala-steward.conf
